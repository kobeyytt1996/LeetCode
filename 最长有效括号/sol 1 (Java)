class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int max = 0;
        
        int[] dp = new int[s.length()];
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == ')') {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = (i - 2 < 0) ? 2 : dp[i - 2] + 2;
                } else {
                    if (i - dp[i - 1] - 1 >= 0) {
                        if (s.charAt(i - dp[i - 1] - 1) == '(') {
                            dp[i] = dp[i - 1] + 2;
                            int last = i - dp[i - 1] - 2;
                            dp[i] += (last >= 0) ? dp[last] : 0;
                        }
                    }
                }
                max = Math.max(max, dp[i]);
            }
        }
        
        return max;
    }
}
