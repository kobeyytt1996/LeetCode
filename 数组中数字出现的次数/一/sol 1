class Solution {
public:
    vector<int> singleNumbers(vector<int>& nums) {
        if (nums.size() < 2)
            return vector<int>();
        int resultExclusiveOr = 0;
        for (auto num : nums)
            resultExclusiveOr ^= num;

        unsigned int indexOf1 = FindFirstBit1(resultExclusiveOr);

        int num1 = 0;
        int num2 = 0;
        for (auto num : nums)
        {
            if (IsBit1(num, indexOf1))
                num1 ^= num;
            else
                num2 ^= num;
        }

        return vector<int>{num1, num2};
    }

    unsigned int FindFirstBit1(int num)
    {
        unsigned int indexOf1 = 0;
        while ((num & 0x1) == 0 && indexOf1 < 8 * sizeof(int))
        {
            num >>= 1;
            ++indexOf1;
        }
        return indexOf1;
    }

    bool IsBit1(int num, unsigned int indexOf1)
    {
        num >>= indexOf1;
        return (num & 0x1);
    }
};
