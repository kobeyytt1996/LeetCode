/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    typedef vector<int>::const_iterator vec_iter;

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.empty() || inorder.empty())
            return nullptr;
        return buildTreeCore(preorder.cbegin(), preorder.cend() - 1, 
                                inorder.cbegin(), inorder.cend() - 1);
    }

    TreeNode* buildTreeCore(vec_iter preOrderStart, vec_iter preOrderEnd, 
                                vec_iter inOrderStart, vec_iter inOrderEnd){
        TreeNode* pNode = new TreeNode(*preOrderStart);
        if (preOrderStart == preOrderEnd)
        {
            if (inOrderStart == inOrderEnd && *preOrderStart == *inOrderStart)
                return pNode;
            else
                return nullptr;
        }

        vec_iter nodePosition = ::find(inOrderStart, inOrderEnd + 1, pNode->val);
        if (nodePosition > inOrderEnd)
            return nullptr;
        
        int leftLength = nodePosition - inOrderStart;
        if (nodePosition > inOrderStart)
            pNode->left = buildTreeCore(preOrderStart + 1, 
                                        preOrderStart + leftLength, 
                                        inOrderStart, nodePosition - 1);
        if (nodePosition < inOrderEnd)
            pNode->right = buildTreeCore(preOrderStart + leftLength + 1,
                                         preOrderEnd, nodePosition + 1, inOrderEnd);
        return pNode;
    }
};
