/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.size() != inorder.size())
            throw std::exception("Invalid Input: different length.");
        return recurseBuild(preorder.begin(), preorder.end(), inorder.begin(), inorder.end());
    }

    TreeNode* recurseBuild(vector<int>::iterator pbegin, vector<int>::iterator pend, vector<int>::iterator ibegin, vector<int>::iterator iend){
        if (pbegin == pend)
            return nullptr;
        auto posi = find(ibegin, iend, *pbegin);
        if (posi == iend)
            throw std::exception("Invalid Input: different value.");
        TreeNode* root = new TreeNode(*pbegin);
        root->left = recurseBuild(pbegin + 1, pbegin + 1 + (posi - ibegin), ibegin, posi);
        root->right = recurseBuild(pbegin + 1 + (posi - ibegin), pend, posi + 1, iend);
        return root;
    }
};
