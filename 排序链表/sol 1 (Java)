/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        } 
        int len = getLength(head);
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        for (int i = 1; i < len; i <<= 1) {
            ListNode curr = dummy.next;
            ListNode pNode = dummy;
            while (curr != null) {
                ListNode left = curr;
                ListNode right = split(curr, i);
                curr = split(right, i);
                pNode.next = merge(left, right);
                while (pNode.next != null) {
                    pNode = pNode.next;
                }
            }
        }
        
        return dummy.next;
    }
    
    private ListNode split(ListNode head, int step) {
        if (head == null) return null;

        for (int i = 1; head.next != null && i < step; i++) {
            head = head.next;
        }

        ListNode right = head.next;
        head.next = null;
        return right;
    }


    
    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode sentry = new ListNode(-1);
        ListNode curr = sentry;

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                curr.next = l2;
                l2 = l2.next;
            }

            curr = curr.next;
        }

        curr.next = l1 != null ? l1 : l2;
        return sentry.next;
    }



    
    private int getLength(ListNode head) {
        int length = 0;
        ListNode curr = head;

        while (curr != null) {
            length++;
            curr = curr.next;
        }

        return length;
    }


}
