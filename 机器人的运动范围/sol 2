class Solution {
public:
    int movingCount(int m, int n, int k) {
        if (m <= 0 || n <= 0 || k < 0)
            return -1;

        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int count = 0;
        rows = m;
        cols = n;
        threshold = k;

        movingCountCore(0, 0, count, visited);
        return count;
    }

    void movingCountCore(int row, int col, int& count, vector<vector<bool>>& visited)
    {
        if (!check(row, col, count, visited))
            return;

        ++count;
        visited[row][col] = true;

        movingCountCore(row + 1, col, count, visited);
        movingCountCore(row, col + 1, count, visited);
        return;
    }

    int digitSum(int num)
    {
        int sum = 0;
        while (num > 0)
        {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }

    bool check(int row, int col, int& count, vector<vector<bool>>& visited)
    {
        if (row >= rows || col >= cols || visited[row][col] == true 
                || digitSum(row) + digitSum(col) > threshold)
            return false;
        return true;
    }
private:
    int rows = 0;
    int cols = 0;
    int threshold = 0;
};
