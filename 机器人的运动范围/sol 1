class Solution {
public:
    int movingCount(int m, int n, int k) {
        if (m <= 0 || n <= 0 || k < 0)
            return 0;
        bool* visited = new bool[m * n];
        for (int i = 0; i != m * n; ++i)
            visited[i] = false;
        int count = movingCountCore(m, n, k, 0, 0, visited);
        return count;
    }

    int movingCountCore(int m, int n, int k, int row, int col, bool* visited)
    {
        int count = 0;
        if (row >= 0 && row < m && col >= 0 && col < n
            && digitSum(row, col) <= k && !visited[row * n + col])
            {
                visited[row * n + col] = true;
                count += 1 + movingCountCore(m, n, k, row - 1, col, visited)
                        + movingCountCore(m, n, k, row, col - 1, visited)
                        + movingCountCore(m, n, k, row + 1, col, visited)
                        + movingCountCore(m, n, k, row, col + 1, visited);
            }
        return count;
    }

    int digitSum(int m, int n)
    {
        int sum = 0;
        sum += m / 10 + m % 10;
        sum += n / 10 + n % 10;
        return sum;
    }
};
