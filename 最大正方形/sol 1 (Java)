class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0] == null) {
            return 0;
        }
        
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[] dp = new int[cols];
        int max = 0;
        for (int i = 0; i < cols; ++i) {
            if (matrix[0][i] == '1') {
                dp[i] = 1;
                max = 1;
            }
        }
        
        int leftUp = 0;
        for (int i = 1; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (j == 0) {
                    leftUp = dp[j];
                    if (matrix[i][j] == '1') {
                        dp[j] = 1;
                        max = (max > 1) ? max : 1;
                    } else {
                        dp[j] = 0;
                    }
                } else {
                    int temp = dp[j];
                    if (matrix[i][j] == '1') {
                        int smaller = Math.min(dp[j], dp[j - 1]);
                        dp[j] = Math.min(smaller, leftUp) + 1;
                        max = Math.max(max, dp[j]);
                    } else {
                        dp[j] = 0;
                    }
                    leftUp = temp;
                }
            }
        }
        return max * max;
    }
}
