class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;
        if (matrix.size() == 0 || matrix[0].size() == 0)
            return result;
        int start = 0;

        while (2 * start < matrix.size() && 2 * start < matrix[0].size())
        {
            MatrixInCircle(matrix, result, start);
            ++start;
        }

        return result;
    }

    void MatrixInCircle(vector<vector<int>>& matrix, vector<int>& result, int start)
    {
        int endX = matrix[0].size() - start - 1;
        int endY = matrix.size() - start - 1;

        for (int i = start; i <= endX; ++i)
            result.push_back(matrix[start][i]);
        if (endY > start)
        {
            for (int i = start + 1; i <= endY; ++i)
                result.push_back(matrix[i][endX]);
        }
        if (endX > start && endY > start)
        {
            for (int i = endX - 1; i >= start; --i)
                result.push_back(matrix[endY][i]);
        }
        if (endY > start + 1 && endX > start)
        {
            for (int i = endY - 1; i > start; --i)
                result.push_back(matrix[i][start]);
        }
    }
};
