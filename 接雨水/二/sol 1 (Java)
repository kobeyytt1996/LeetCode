class Cell {
    int row;
    int col;
    int height;
    Cell(int row, int col, int height) {
        this.row = row;
        this.col = col;
        this.height = height;
    }
}
class Solution {
    public int trapRainWater(int[][] heightMap) {
        if (heightMap == null || heightMap.length == 0 || heightMap[0].length == 0) {
            return 0;
        }

        PriorityQueue<Cell> wall = new PriorityQueue<>((c1, c2) -> c1.height - c2.height);
        for (int i = 0; i < heightMap.length; ++i) {
            for (int j = 0; j < heightMap[0].length; ++j) {
                if (i == 0 || i == heightMap.length-1 || j == 0 || j == heightMap[0].length-1) {
                    wall.offer(new Cell(i, j, heightMap[i][j]));
                    heightMap[i][j] = -1;
                }
                
            }
        }

        int result = 0;
        int[] dx = {1, 0, -1, 0};
        int[] dy = {0, 1, 0, -1};
        while (!wall.isEmpty()) {
            Cell lowest = wall.poll();
            for (int i = 0; i < 4; ++i) {
                int x = lowest.row + dx[i];
                int y = lowest.col + dy[i];
                if (x >= 0 && x < heightMap.length && y >= 0 && y < heightMap[0].length
                    && heightMap[x][y] != -1) {
                    if (heightMap[x][y] < lowest.height) {
                        result += lowest.height - heightMap[x][y];
                        wall.offer(new Cell(x, y, lowest.height));
                    } else {
                        wall.offer(new Cell(x, y, heightMap[x][y]));
                    }
                    heightMap[x][y] = -1;
                }
            }
        }

        return result;
    }
}
