/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if (root == nullptr)
            return result;

        queue<TreeNode*> bfs;
        TreeNode* pNode = root;
        bfs.push(pNode);
        int isReverse = 0;

        while (!bfs.empty())
        {
            int levelSize = bfs.size();
            vector<int> level(levelSize);
            for (int i = 0; i < levelSize; ++i)
            {
                pNode = bfs.front();
                bfs.pop();
                if (pNode->left)
                    bfs.push(pNode->left);
                if (pNode->right)
                    bfs.push(pNode->right);
                if (isReverse == 0)
                    level[i] = pNode->val;
                else
                    level[levelSize - i - 1] = pNode->val;
            }
            isReverse = 1- isReverse;

            result.push_back(level);
        }

        return result;
    }
};
