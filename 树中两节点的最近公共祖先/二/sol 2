class Solution {
public:
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
		if (root==NULL || root==p ||root==q) //出现了要找的节点，直接返回
		{
			return root;
		}
		//后序遍历，因为上面找到后直接返回，所以实际上不是真正的后序遍历
		TreeNode* left=lowestCommonAncestor(root->left, p, q);
		TreeNode* right=lowestCommonAncestor(root->right, p, q);
		if (left==NULL)//一边是空那么直接返回另一边，因为不管另一边是空或者有找到节点都不会造成影响
		{
			return right;
		}
		else if(right==NULL)
		{
			return left;
		}
		else//左右都非空，那么说明此时的节点是最近的祖先节点
		{
			return root;
		}
	}
};
