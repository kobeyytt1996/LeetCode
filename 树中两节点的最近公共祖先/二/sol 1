/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr || p == nullptr || q == nullptr || p == q)
            return nullptr;

        vector<TreeNode*> path1, path2;
        GetNodePath(root, p, path1);
        GetNodePath(root, q, path2);

        return GetLastCommonNode(path1, path2);
    }

    bool GetNodePath(TreeNode* root, TreeNode* node, vector<TreeNode*>& path)
    {
        path.push_back(root);
        if (root == node)
            return true;
        bool found = false;
        if (root->left != nullptr)
            found = GetNodePath(root->left, node, path);
        if (!found && root->right != nullptr)
            found = GetNodePath(root->right, node, path);

        if (!found)
            path.pop_back();
        return found;
    }

    TreeNode* GetLastCommonNode(vector<TreeNode*>& path1, vector<TreeNode*>& path2)
    {
        if (path1.empty() || path2.empty())
            return nullptr;
        TreeNode *pCommon = nullptr;
        for (int i = 0, j = 0; i < path1.size() && j < path2.size(); ++i, ++j)
        {
            if (path1[i] == path2[j])
                pCommon = path1[i];
            else
                break;
        }

        return pCommon;
    }
};
