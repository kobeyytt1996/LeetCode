/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if (root == nullptr)
            return root;
        
        stack<Node*> inOrder;
        while (root)
        {
            inOrder.push(root);
            root = root->left;
        }
        Node* listHead = inOrder.top();

        Node* pPreNode = new Node(0);
        while (!inOrder.empty())
        {
            Node* pNode = inOrder.top();
            inOrder.pop();
            if (pNode->right)
            {
                Node* pChild = pNode->right;
                while (pChild)
                {
                    inOrder.push(pChild);
                    pChild = pChild->left;
                }
            }
            pPreNode->right = pNode;
            pNode->left = pPreNode;
            pPreNode = pNode;
        }

        pPreNode->right = listHead;
        delete listHead->left;
        listHead->left = pPreNode;

        return listHead;
    }
};
