/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if (root == nullptr)
            return nullptr;
        Node* lastNodeInList = nullptr;
        ConvertNode(root, &lastNodeInList);

        Node* headOfList = lastNodeInList;
        while (headOfList->left != nullptr)
            headOfList = headOfList->left;
        headOfList->left = lastNodeInList;
        lastNodeInList->right = headOfList;
        
        return headOfList;
    }

    void ConvertNode(Node* pNode, Node** lastNodeInList)
    {
        if (pNode->left != nullptr)
            ConvertNode(pNode->left, lastNodeInList);

        pNode->left = *lastNodeInList;
        if (*lastNodeInList != nullptr)
            (*lastNodeInList)->right = pNode;
        *lastNodeInList = pNode;

        if (pNode->right != nullptr)
            ConvertNode(pNode->right, lastNodeInList);
        return;
    }
};
