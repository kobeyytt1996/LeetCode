class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if (board.empty() || board[0].empty() || word.empty())
            return false;
        for (int i = 0; i < board.size(); ++i)
        {
            for (int j = 0; j < board[0].size(); ++j)
            {
                if (board[i][j] == word[0])
                    if (existPath(board, word, i, j, 0))
                        return true;
            }
        }

        return false;
    }

    bool existPath(vector<vector<char>>& board, string& word, int row, int col, int len)
    {
        char origin = board[row][col];
        board[row][col] = '-';
        if (len == word.size() - 1)
            return true;
        bool result = false;
        for (int k = 0; k <= 3; ++k)
        {
            int newRow = row + directionX[k];
            int newCol = col + directionY[k];
            if (newRow >= 0 && newRow < board.size() && newCol >= 0 && newCol < board[0].size()
                && board[newRow][newCol] == word[len + 1])
                if (existPath(board, word, newRow, newCol, len + 1))
                {
                    result = true;
                    break;
                }
        }
        board[row][col] = origin;
        return result;
    }
private:
    int directionX[4] = {0, 1, 0, -1};
    int directionY[4] = {-1, 0, 1, 0};
};
